package com.FlipKart.testCases;
import org.testng.ITestResult;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeSuite;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Properties;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.testng.annotations.AfterSuite;

import com.FlipKart.Utilities.Utilities;
import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.Status;
import com.aventstack.extentreports.markuputils.ExtentColor;
import com.aventstack.extentreports.markuputils.MarkupHelper;


public class BaseClass {
	
	public static WebDriver driver;
	public static Properties prop;
	public static ExtentReports extent;
	public static ExtentTest test;
	public static String time;
	public static String path;
	
	public BaseClass()
	{
		extent= new ExtentReports();
		try
		{
				prop = new Properties();
				String configpath=System.getProperty("user.dir");
				File srcfile = new File(configpath+"//Configuration/config.properties");
				FileInputStream fis = new FileInputStream(srcfile);
				prop.load(fis);
				}
				catch(FileNotFoundException e)
				{
					e.printStackTrace();
				}
				
				catch (IOException e) {
				System.out.println("Exception is:" + e.getMessage());				
				}	
		}
	
	
	@BeforeSuite(description="It is used for supporting different browsers")
	public static void initialization()
	{
		
		String browsername=  prop.getProperty("browser");
		if(browsername.equals("chrome"))
		{
			String driverpath=System.getProperty("user.dir");
			System.setProperty("webdriver.chrome.driver",driverpath+"//Drivers//chromedriver.exe");
			driver = new ChromeDriver();
		}
		
		else if(browsername.equals("Firefox"))
		{
			String driverpath=System.getProperty("user.dir");
			System.setProperty("webdriver.gecko.driver",driverpath+"//Drivers//geckodriver.exe");
			driver = new FirefoxDriver();
		}
		
		else if(browsername.equals("ie"))
		{
			String driverpath=System.getProperty("user.dir");
			System.setProperty("webdriver.ie.driver",driverpath+"//Drivers//IEDriverServer.exe");
			driver = new InternetExplorerDriver();
		}
		
		driver.manage().window().maximize();
		driver.manage().deleteAllCookies();
		driver.manage().timeouts().pageLoadTimeout(Utilities.PAGE_LOAD_TIMEOUT, TimeUnit.SECONDS);
		driver.manage().timeouts().implicitlyWait(Utilities.IMPLICIT_WAIT,TimeUnit.SECONDS);	
		driver.get(prop.getProperty("baseURL"));
		//test.log(Status.INFO,"Get the url properly");
	}
	
	 @AfterMethod
	    public void getResult(ITestResult result) throws IOException {
	        if(result.getStatus() == ITestResult.FAILURE) {
	        	String res = Utilities.takeScreenshot(driver, result.getName());
	            ExtentTest image= test.addScreenCaptureFromPath(res);
	            String TestCaseName = this.getClass().getSimpleName() + " Test Case Failure";
	            test.log(Status.FAIL, TestCaseName + test.addScreencastFromPath(res));
	        }
	        else if(result.getStatus() == ITestResult.SUCCESS) {
	            test.log(Status.PASS, MarkupHelper.createLabel(result.getName()+" PASSED ", ExtentColor.GREEN));
	        }
	        else {
	            test.log(Status.SKIP, MarkupHelper.createLabel(result.getName()+" SKIPPED ", ExtentColor.ORANGE));
	            test.skip(result.getThrowable());
	        }
	       // extent.flush();
	    }
	
		
	 @AfterTest
	    public void closeExtendReport() {   	
	       extent.flush();
	    }
	 
		
	@AfterSuite(description="used for closing all browser after executing application")
	public void tearDown()
	{
		driver.quit();
	}
	
	
}
