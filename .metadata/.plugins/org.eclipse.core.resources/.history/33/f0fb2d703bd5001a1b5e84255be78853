package com.FlipKart.testCases;
import org.testng.ITestResult;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeSuite;
import org.testng.annotations.BeforeTest;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Properties;
import java.util.concurrent.TimeUnit;

import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterSuite;
import org.testng.annotations.BeforeClass;
import com.aventstack.extentreports.*;

import org.testng.annotations.BeforeSuite;

import com.FlipKart.Utilities.Utilities;
import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.utils.FileUtil;

public class BaseClass {
	
	public static WebDriver driver;
	public static Logger logg;	
	public static Properties prop;
 	public static ExtentReports report;
	public static ExtentTest test;
	public static String time;
	public static String dest;
	
	public BaseClass()
	{
		report = new ExtentReports();
		test = new ExtentTest(report,"abc","abc");
		try
		{
				prop = new Properties();
				String configpath=System.getProperty("user.dir");
				File srcfile = new File(configpath+"//Configuration/config.properties");
				FileInputStream fis = new FileInputStream(srcfile);
				prop.load(fis);
				}
				catch(FileNotFoundException e)
				{
					e.printStackTrace();
				}
				
				catch (IOException e) {
				System.out.println("Exception is:" + e.getMessage());				
				}	
		}
	// This method helps to take screenshot
	public static String takeScreenshot(WebDriver driver) {
		try {
			DateFormat dateFormat = new SimpleDateFormat("yyyy_MM_dd_HHmmss");
			Date date = new Date();
			time = dateFormat.format(date);
			//System.out.println("Time is" + time);
			TakesScreenshot tc = (TakesScreenshot) driver;
			File src = tc.getScreenshotAs(OutputType.FILE);

			dest = "Screenshots \\" + time + ".png"; 
			File destination = new File(dest);
			FileUtils.copyFile(src, destination);
			System.out.println("Screen shot taken");
		} catch (Exception ex) {
			System.out.println("Screenshot error is" + ex.getMessage());
		}
		return dest;
	}
	
	@BeforeSuite(description="It is used for supporting different browsers")
	public static void initialization()
	{
		
		String browsername=  prop.getProperty("browser");
		if(browsername.equals("chrome"))
		{
			String driverpath=System.getProperty("user.dir");
			System.setProperty("webdriver.chrome.driver",driverpath+"//Drivers//chromedriver.exe");
			driver = new ChromeDriver();
		}
		
		else if(browsername.equals("Firefox"))
		{
			String driverpath=System.getProperty("user.dir");
			System.setProperty("webdriver.gecko.driver",driverpath+"//Drivers//geckodriver.exe");
			driver = new FirefoxDriver();
		}
		
		else if(browsername.equals("ie"))
		{
			String driverpath=System.getProperty("user.dir");
			System.setProperty("webdriver.ie.driver",driverpath+"//Drivers//IEDriverServer.exe");
			driver = new InternetExplorerDriver();
		}
		/*Logger logg =Logger.getLogger("BaseClass");
		PropertyConfigurator.configure("Log4j.properties");*/
		
		driver.manage().window().maximize();
		driver.manage().deleteAllCookies();
		driver.manage().timeouts().pageLoadTimeout(Utilities.PAGE_LOAD_TIMEOUT, TimeUnit.SECONDS);
		driver.manage().timeouts().implicitlyWait(Utilities.IMPLICIT_WAIT,TimeUnit.SECONDS);	
		
		driver.get(prop.getProperty("baseURL"));
		//logg.info("URL is opened");
	}
	
	@AfterMethod(description="It is used for get the report status")
	public void getReport(ITestResult result) {
		try {
			String screnshotpath = takeScreenshot(driver);
			if (result.getStatus() == ITestResult.FAILURE) {

				// String info=result.getThrowable();
				//test.log(test., result.getThrowable());
				test.log(test.setTestRunnerOutput("");//.FAIL, "Below is the screen shot:-"+test.addScreenCapture(screnshotpath));
				test.log(LogStatus.FAIL, "Test Case Fail is:- "+result.getName());
				
				//test.addScreenCaptureFromPath("please refer below screennshot",screnshotpath);

			}
			else if(result.getStatus()==ITestResult.SUCCESS)
			{
				test.log(LogStatus.PASS, "Test Case pass is:- "+result.getName());
				test.log(LogStatus.PASS, "Below is the screen shot:-"+test.addScreenCapture(screnshotpath));
			}
			else if(result.getStatus()==ITestResult.SKIP)
			{
				test.log(LogStatus.SKIP, "test Case skip is:- "+result.getName());
			}
			else if(result.getStatus()==ITestResult.STARTED)
			{test.log(LogStatus.INFO, "Test Case started");

			}
			report.endTest(test);

		} catch (Exception es) {
			System.out.println(" Report genration Excepion is:- " + es.getMessage());
		}
	}
	
	@AfterClass(description="used for closing all browser")
	public void tearDown()
	{
		driver.quit();
	}
	
	
}
