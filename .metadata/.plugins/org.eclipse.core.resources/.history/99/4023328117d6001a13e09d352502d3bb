package com.FlipKart.ExtendReport;

import org.testng.ITestContext;
import org.testng.ITestListener;
import org.testng.ITestResult;








import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.concurrent.TimeUnit;

import org.apache.commons.io.FileUtils;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;

import com.FlipKart.Utilities.Utilities;
import com.FlipKart.testCases.BaseClass;
import com.relevantcodes.extentreports.ExtentReports;
import com.relevantcodes.extentreports.ExtentTest;
import com.relevantcodes.extentreports.LogStatus;
import com.relevantcodes.extentreports.LogStatus;


public class ListerenerTest extends BaseClass implements ITestListener{
	
	
	

	 public void onStart(ITestContext context) {
		  System.out.println("on start");
		   // Set the drivers path in environment variables to avoid code(System.setProperty())
		  reports = new ExtentReports(System.getProperty("user.dir") + "/Reports/"+ new SimpleDateFormat("yyyy-MM-dd hh-mm-ss").format(new Date())+ '_' + "reports.html");
		  //extendReportListener = new ExtendReportListener();
		  //extendReportListener.extendTest();
		//  ExtentReports extentReports = extendReportListener.setUp();
		 }
		 public void onFinish(ITestContext context) {
		  System.out.println("on finish");
		  reports.endTest(test);
		  reports.flush();
		 }
	
	public void onTestStart(ITestResult result) {
	  System.out.println("on test start");
	  test = reports.startTest(result.getMethod().getMethodName());
	  test.log(LogStatus.INFO, result.getMethod().getMethodName() + " test is started");
	  System.out.println(result.getMethod().getMethodName());
	  System.out.println(test);
	 }
	 public void onTestSuccess(ITestResult result) {
	  System.out.println("on test success");
	  test.log(LogStatus.PASS, result.getMethod().getMethodName() + "test is passed");
	 }
	 public void onTestFailure(ITestResult result) {
	  System.out.println("on test failure");
	  test.log(LogStatus.FAIL, result.getMethod().getMethodName() + " test is failed");
	  TakesScreenshot ts = (TakesScreenshot) driver;
	  System.out.println(driver);
	  File src = ts.getScreenshotAs(OutputType.FILE);
	  try {
	   FileUtils.copyFile(src, new File(System.getProperty("user.dir") + "/Screenshots/" + result.getMethod().getMethodName() + ".png"));
	   String file = test.addScreenCapture(System.getProperty("user.dir") + "/Screenshots/" + result.getMethod().getMethodName() + ".png");
	   test.log(LogStatus.FAIL, result.getMethod().getMethodName() + "test is failed", file);
	   test.log(LogStatus.FAIL, result.getMethod().getMethodName() + "test is failed", result.getThrowable().getMessage());
	  }
	  catch (IOException e) {
	   e.printStackTrace();
	  }
	  
//	   	String res = Utilities.takeScreenshot(driver, result.getName());
//        ExtentTest image= test.addScreenCapture(res);
//        String TestCaseName = this.getClass().getSimpleName() + " Test Case Failure";
//        test.log(Status.FAIL, TestCaseName + test.addScreencastFromPath(res));
	  
	  
	 }
	 public void onTestSkipped(ITestResult result) {
	  System.out.println("on test skipped");
	  test.log(LogStatus.SKIP, result.getMethod().getMethodName() + "test is skipped");
	 }
	 public void onTestFailedButWithinSuccessPercentage(ITestResult result) {
	  System.out.println("on test sucess within percentage");
	 }
	 

}
