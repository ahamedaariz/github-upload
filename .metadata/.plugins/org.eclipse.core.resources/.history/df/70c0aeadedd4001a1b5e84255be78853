package com.FlipKart.Utilities;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.WebElement;

import com.FlipKart.PageObjects.AddProduct;
import com.FlipKart.testCases.BaseClass;

public class Utilities extends BaseClass {
	AddProduct addproduct;
	
	public static long PAGE_LOAD_TIMEOUT =20;
	public static long IMPLICIT_WAIT =20;

	public static void windowHandles(String superWindow)
	{
		String parentWindow =superWindow;
		Set<String> windows = driver.getWindowHandles();
		while(windows.size()!=0)
		{
			if(windows.size()>1)
			{
				break;
			}
			
			windows = driver.getWindowHandles();
		}
		
		for(String childWindow:windows )
		{
			if(childWindow!=parentWindow)
			{
				driver.switchTo().window(childWindow);
				System.out.println("Child is:"+childWindow );
			}
		}
	}
	
	//****************************-----***********************************
	
	//Method to read the data from excel test data sheet and write that into a hash map
    public static Map<String,  Map<String, List<String>>> readExcelData(String path) throws Exception {

        Map<String, Map<String, List<String>>> excelFileMap = null;
        try {

            FileInputStream fis = new FileInputStream(path);
            Workbook workbook = new XSSFWorkbook(fis);
            Sheet sheet = workbook.getSheetAt(0);
            String key;

            int columnCount = sheet.getRow(0).getLastCellNum();
            int rowCount = sheet.getLastRowNum();

            excelFileMap = new HashMap<String, Map<String, List<String>>>();

            Map<String, List<String>> dataMap = new HashMap<String, List<String>>();

            Row keyRow = sheet.getRow(0);

            //Looping over all the columns and get each cell data
            for (int i = 0; i < columnCount; i++)
            {
                Cell keyCell = keyRow.getCell(i);
                key = keyCell.getStringCellValue().trim();
                List<String> valueSet = new ArrayList<String>();
                for (int j = 1; j <= rowCount; j++)
                {
                    Row valRow = sheet.getRow(j);
                    Cell valueCell = valRow.getCell(i);
                    String value = valueCell.getStringCellValue().trim();
                    valueSet.add(value);
                }
                //Putting key & value in dataMap
                dataMap.put(key, valueSet);
                excelFileMap.put("DataSheet", dataMap);
            }


        } catch (Exception e) {
            //System.out.println(e.getMessage());
            System.out.println("The test data file is not available in the mentioned path");

            throw(e);
        }

        //Returning excelFileMap
        return excelFileMap;
    }

    //Method to retrieve value based on the key
    public static List<String> getExcelData(Map<String, Map<String, List<String>>> m, String key) throws IOException
    {

        //Map<String, List<String>> m = readExcelData(path).get("DataSheet");
        Map<String, List<String>> n = m.get("DataSheet");
        List<String> value = n.get(key);

        return value;
    }

//----------------------------------------------------------------------------------------------------------------//

//Method to retrieve the Locator Value and Locator Type based on the Element to set the application Objects
public static void getExcelDataOR(Map<String, Map<String, List<String>>> m, String key) throws IOException{

    Map<String, List<String>> n = m.get("DataSheet");
    //String ObjRepoMetadata[];

    String ObjRepoMetadata[] = new String[100];

    List<String> Element = n.get("Element");
    List<String> LocatorType = n.get("LocatorType");
    List<String> LocatorValue = n.get("LocatorValue");

    for(int i=0;i<Element.size();i++)
    {

        if (Element.get(i).equalsIgnoreCase(key))
        {
            ObjRepoMetadata[0] = LocatorType.get(i);
            ObjRepoMetadata[1] = LocatorValue.get(i);
            break;
        }
    }

    //return element;

}

public static String getcellData_OBR_PC(String path,String sheet,String key,String columnName) {
    String CellData = "";
    int ColumnNum = 1;
    if(columnName.equalsIgnoreCase("LocatorType"))
        ColumnNum = 1;
    else if (columnName.equalsIgnoreCase("LocatorValue"))
        ColumnNum = 2;
    else if (columnName.equalsIgnoreCase("Value"))
        ColumnNum = 1;

    try {
        FileInputStream fis = new FileInputStream( new File(path));
        Workbook wb = new XSSFWorkbook(fis);
        Sheet sheet1 = wb.getSheet(sheet);

        int rowCount=sheet1.getLastRowNum();
        for(int row=1;row<=rowCount+1;row++) {
            String RowData =  sheet1.getRow(row).getCell(0).toString();
            if (RowData.trim().equalsIgnoreCase(key)) {
                CellData = sheet1.getRow(row).getCell(ColumnNum).toString();
                break;
            }
        }

    } catch (Exception e) {
        //reporter.log(LogStatus.ERROR,"Data Failed to fetch, Please check the Excel Sheet Method Parameters");
      //  Assert.fail();
    }
    return CellData;
}

//Get Cell data
public static String getcellData_Test(String path,String sheet,String key) {
    String CellData = "";
    int RowNum = 1;

    try {
        FileInputStream fis = new FileInputStream( new File(path));
        Workbook wb = new XSSFWorkbook(fis);
        Sheet sheet1 = wb.getSheet(sheet);

        int columnCount=sheet1.getRow(0).getLastCellNum();
        for(int cell=0;cell<=columnCount;cell++) {
            String RowData =  sheet1.getRow(0).getCell(cell).toString();
            if (RowData.trim().equalsIgnoreCase(key)) {
                CellData = sheet1.getRow(RowNum).getCell(cell).toString();
                break;
            }
        }

    } catch (Exception e) {
  //      reporter.log(LogStatus.ERROR,"Data Failed to fetch, Please check the Excel Sheet Method Parameters");
    //    Assert.fail();
    }
    return CellData;
}
//----------------------------------------------------------------------------------------------------------------//


}
